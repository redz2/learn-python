"""
人类使用文本，计算机使用字节序列
Unicode字符串(str) <---> 二进制序列(bytes: 字节序列)  | 最小单位不同：字符 vs 字节
"""


# 编码
a = 'abcd'
print(type(a)) # str
b = a.encode('utf-8')
print(b)
print(type(b)) # bytes
# 解码
c = b.decode('utf-8')
print(c)
print(type(c)) # str
# 从字符串创建二进制序列类型（二进制序列的切片是同一类型的二进制序列）
cafe = bytes('cafe', encoding='utf-8')
print(cafe)
print(type(cafe)) # bytes

# 只处理ASCII文本为什么无所谓？
# 应该是编码和解码后一样的！

# 如何处理str和bytes？


# 字符串：是一个字符序列（什么是字符呢？最佳定义是Unicode字符）
# 把码位转换成字节序列的过程是编码；把字节序列转换成码位的过程就是解码（编码的目的是为了节约存储空间，暂时不考虑字符意义，一个中文字符可能被拆成多个字节）


# 如何找出字节序列的编码规则？
# 必须有人来告诉你，否则就是一段无意义的字节序列
# 当然，每种编码的数据都会有一定的特征，可以猜出来是哪种编码，有个Chardet工具可以干这件事情


# 处理文本（三明治）
# 尽早把字节序列转换成字符串，业务处理只处理字符串，尽量晚把字符串编码为字接序列


# 内存中如何存储str？
# python解释器会检查每个字符，挑选合适的内存布局，所以无法确定字符串如何在内存中存储
# 我们只需要搞清楚一个字符和一个字节是不同的