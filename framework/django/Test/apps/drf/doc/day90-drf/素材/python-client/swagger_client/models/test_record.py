# coding: utf-8

"""
    项目名

    项目描述  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: 649641514@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TestRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'test_time': 'str',
        'teststatus': 'bool',
        'test_amount': 'int',
        'test_means': 'str',
        'test_ending': 'str',
        'acc': 'float',
        'test_person_id': 'object'
    }

    attribute_map = {
        'id': 'id',
        'test_time': 'testTime',
        'teststatus': 'teststatus',
        'test_amount': 'testAmount',
        'test_means': 'testMeans',
        'test_ending': 'testEnding',
        'acc': 'acc',
        'test_person_id': 'testPersonID'
    }

    def __init__(self, id=None, test_time=None, teststatus=None, test_amount=None, test_means=None, test_ending=None, acc=None, test_person_id=None, _configuration=None):  # noqa: E501
        """TestRecord - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._test_time = None
        self._teststatus = None
        self._test_amount = None
        self._test_means = None
        self._test_ending = None
        self._acc = None
        self._test_person_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if test_time is not None:
            self.test_time = test_time
        if teststatus is not None:
            self.teststatus = teststatus
        if test_amount is not None:
            self.test_amount = test_amount
        if test_means is not None:
            self.test_means = test_means
        if test_ending is not None:
            self.test_ending = test_ending
        if acc is not None:
            self.acc = acc
        if test_person_id is not None:
            self.test_person_id = test_person_id

    @property
    def id(self):
        """Gets the id of this TestRecord.  # noqa: E501

        测试ID  # noqa: E501

        :return: The id of this TestRecord.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestRecord.

        测试ID  # noqa: E501

        :param id: The id of this TestRecord.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def test_time(self):
        """Gets the test_time of this TestRecord.  # noqa: E501

        测试时间  # noqa: E501

        :return: The test_time of this TestRecord.  # noqa: E501
        :rtype: str
        """
        return self._test_time

    @test_time.setter
    def test_time(self, test_time):
        """Sets the test_time of this TestRecord.

        测试时间  # noqa: E501

        :param test_time: The test_time of this TestRecord.  # noqa: E501
        :type: str
        """

        self._test_time = test_time

    @property
    def teststatus(self):
        """Gets the teststatus of this TestRecord.  # noqa: E501

        0-未完成 1-已完成  # noqa: E501

        :return: The teststatus of this TestRecord.  # noqa: E501
        :rtype: bool
        """
        return self._teststatus

    @teststatus.setter
    def teststatus(self, teststatus):
        """Sets the teststatus of this TestRecord.

        0-未完成 1-已完成  # noqa: E501

        :param teststatus: The teststatus of this TestRecord.  # noqa: E501
        :type: bool
        """

        self._teststatus = teststatus

    @property
    def test_amount(self):
        """Gets the test_amount of this TestRecord.  # noqa: E501

        读片数量  # noqa: E501

        :return: The test_amount of this TestRecord.  # noqa: E501
        :rtype: int
        """
        return self._test_amount

    @test_amount.setter
    def test_amount(self, test_amount):
        """Sets the test_amount of this TestRecord.

        读片数量  # noqa: E501

        :param test_amount: The test_amount of this TestRecord.  # noqa: E501
        :type: int
        """

        self._test_amount = test_amount

    @property
    def test_means(self):
        """Gets the test_means of this TestRecord.  # noqa: E501

        读片方法  # noqa: E501

        :return: The test_means of this TestRecord.  # noqa: E501
        :rtype: str
        """
        return self._test_means

    @test_means.setter
    def test_means(self, test_means):
        """Sets the test_means of this TestRecord.

        读片方法  # noqa: E501

        :param test_means: The test_means of this TestRecord.  # noqa: E501
        :type: str
        """

        self._test_means = test_means

    @property
    def test_ending(self):
        """Gets the test_ending of this TestRecord.  # noqa: E501

        单个读片结果  # noqa: E501

        :return: The test_ending of this TestRecord.  # noqa: E501
        :rtype: str
        """
        return self._test_ending

    @test_ending.setter
    def test_ending(self, test_ending):
        """Sets the test_ending of this TestRecord.

        单个读片结果  # noqa: E501

        :param test_ending: The test_ending of this TestRecord.  # noqa: E501
        :type: str
        """

        self._test_ending = test_ending

    @property
    def acc(self):
        """Gets the acc of this TestRecord.  # noqa: E501

        正确率  # noqa: E501

        :return: The acc of this TestRecord.  # noqa: E501
        :rtype: float
        """
        return self._acc

    @acc.setter
    def acc(self, acc):
        """Sets the acc of this TestRecord.

        正确率  # noqa: E501

        :param acc: The acc of this TestRecord.  # noqa: E501
        :type: float
        """

        self._acc = acc

    @property
    def test_person_id(self):
        """Gets the test_person_id of this TestRecord.  # noqa: E501

        测试人id,关联用户表  # noqa: E501

        :return: The test_person_id of this TestRecord.  # noqa: E501
        :rtype: object
        """
        return self._test_person_id

    @test_person_id.setter
    def test_person_id(self, test_person_id):
        """Sets the test_person_id of this TestRecord.

        测试人id,关联用户表  # noqa: E501

        :param test_person_id: The test_person_id of this TestRecord.  # noqa: E501
        :type: object
        """

        self._test_person_id = test_person_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestRecord):
            return True

        return self.to_dict() != other.to_dict()
