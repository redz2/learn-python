# coding: utf-8

"""
    项目名

    项目描述  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: 649641514@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MedicalRecords(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'visit_time': 'str',
        'height': 'float',
        'weight': 'float',
        'height_report': 'str',
        'weight_report': 'str',
        'has_boneage_info': 'bool',
        'boneage': 'object',
        'archive': 'object'
    }

    attribute_map = {
        'id': 'id',
        'visit_time': 'visitTime',
        'height': 'height',
        'weight': 'weight',
        'height_report': 'heightReport',
        'weight_report': 'weightReport',
        'has_boneage_info': 'has_boneage_info',
        'boneage': 'boneage',
        'archive': 'archive'
    }

    def __init__(self, id=None, visit_time=None, height=None, weight=None, height_report=None, weight_report=None, has_boneage_info=None, boneage=None, archive=None, _configuration=None):  # noqa: E501
        """MedicalRecords - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._visit_time = None
        self._height = None
        self._weight = None
        self._height_report = None
        self._weight_report = None
        self._has_boneage_info = None
        self._boneage = None
        self._archive = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.visit_time = visit_time
        self.height = height
        self.weight = weight
        self.height_report = height_report
        self.weight_report = weight_report
        if has_boneage_info is not None:
            self.has_boneage_info = has_boneage_info
        self.boneage = boneage
        if archive is not None:
            self.archive = archive

    @property
    def id(self):
        """Gets the id of this MedicalRecords.  # noqa: E501

        就诊id  # noqa: E501

        :return: The id of this MedicalRecords.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MedicalRecords.

        就诊id  # noqa: E501

        :param id: The id of this MedicalRecords.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def visit_time(self):
        """Gets the visit_time of this MedicalRecords.  # noqa: E501

        就诊时间  # noqa: E501

        :return: The visit_time of this MedicalRecords.  # noqa: E501
        :rtype: str
        """
        return self._visit_time

    @visit_time.setter
    def visit_time(self, visit_time):
        """Sets the visit_time of this MedicalRecords.

        就诊时间  # noqa: E501

        :param visit_time: The visit_time of this MedicalRecords.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and visit_time is None:
            raise ValueError("Invalid value for `visit_time`, must not be `None`")  # noqa: E501

        self._visit_time = visit_time

    @property
    def height(self):
        """Gets the height of this MedicalRecords.  # noqa: E501

        就诊身高  # noqa: E501

        :return: The height of this MedicalRecords.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this MedicalRecords.

        就诊身高  # noqa: E501

        :param height: The height of this MedicalRecords.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def weight(self):
        """Gets the weight of this MedicalRecords.  # noqa: E501

        就诊体重  # noqa: E501

        :return: The weight of this MedicalRecords.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this MedicalRecords.

        就诊体重  # noqa: E501

        :param weight: The weight of this MedicalRecords.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def height_report(self):
        """Gets the height_report of this MedicalRecords.  # noqa: E501

        身高报告 json数据  # noqa: E501

        :return: The height_report of this MedicalRecords.  # noqa: E501
        :rtype: str
        """
        return self._height_report

    @height_report.setter
    def height_report(self, height_report):
        """Sets the height_report of this MedicalRecords.

        身高报告 json数据  # noqa: E501

        :param height_report: The height_report of this MedicalRecords.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and height_report is None:
            raise ValueError("Invalid value for `height_report`, must not be `None`")  # noqa: E501

        self._height_report = height_report

    @property
    def weight_report(self):
        """Gets the weight_report of this MedicalRecords.  # noqa: E501

        BMI报告 json数据  # noqa: E501

        :return: The weight_report of this MedicalRecords.  # noqa: E501
        :rtype: str
        """
        return self._weight_report

    @weight_report.setter
    def weight_report(self, weight_report):
        """Sets the weight_report of this MedicalRecords.

        BMI报告 json数据  # noqa: E501

        :param weight_report: The weight_report of this MedicalRecords.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and weight_report is None:
            raise ValueError("Invalid value for `weight_report`, must not be `None`")  # noqa: E501

        self._weight_report = weight_report

    @property
    def has_boneage_info(self):
        """Gets the has_boneage_info of this MedicalRecords.  # noqa: E501

        是否有骨龄信息 true-有 false-无  # noqa: E501

        :return: The has_boneage_info of this MedicalRecords.  # noqa: E501
        :rtype: bool
        """
        return self._has_boneage_info

    @has_boneage_info.setter
    def has_boneage_info(self, has_boneage_info):
        """Sets the has_boneage_info of this MedicalRecords.

        是否有骨龄信息 true-有 false-无  # noqa: E501

        :param has_boneage_info: The has_boneage_info of this MedicalRecords.  # noqa: E501
        :type: bool
        """

        self._has_boneage_info = has_boneage_info

    @property
    def boneage(self):
        """Gets the boneage of this MedicalRecords.  # noqa: E501

        骨龄信息id,管理就诊人的骨龄信息  # noqa: E501

        :return: The boneage of this MedicalRecords.  # noqa: E501
        :rtype: object
        """
        return self._boneage

    @boneage.setter
    def boneage(self, boneage):
        """Sets the boneage of this MedicalRecords.

        骨龄信息id,管理就诊人的骨龄信息  # noqa: E501

        :param boneage: The boneage of this MedicalRecords.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and boneage is None:
            raise ValueError("Invalid value for `boneage`, must not be `None`")  # noqa: E501

        self._boneage = boneage

    @property
    def archive(self):
        """Gets the archive of this MedicalRecords.  # noqa: E501

        档案id,关联就诊人的档案信息  # noqa: E501

        :return: The archive of this MedicalRecords.  # noqa: E501
        :rtype: object
        """
        return self._archive

    @archive.setter
    def archive(self, archive):
        """Sets the archive of this MedicalRecords.

        档案id,关联就诊人的档案信息  # noqa: E501

        :param archive: The archive of this MedicalRecords.  # noqa: E501
        :type: object
        """

        self._archive = archive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MedicalRecords, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MedicalRecords):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MedicalRecords):
            return True

        return self.to_dict() != other.to_dict()
