# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MedicalRecords(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, visit_time: str=None, height: float=None, weight: float=None, height_report: str=None, weight_report: str=None, has_boneage_info: bool=None, boneage: object=None, archive: object=None):  # noqa: E501
        """MedicalRecords - a model defined in Swagger

        :param id: The id of this MedicalRecords.  # noqa: E501
        :type id: int
        :param visit_time: The visit_time of this MedicalRecords.  # noqa: E501
        :type visit_time: str
        :param height: The height of this MedicalRecords.  # noqa: E501
        :type height: float
        :param weight: The weight of this MedicalRecords.  # noqa: E501
        :type weight: float
        :param height_report: The height_report of this MedicalRecords.  # noqa: E501
        :type height_report: str
        :param weight_report: The weight_report of this MedicalRecords.  # noqa: E501
        :type weight_report: str
        :param has_boneage_info: The has_boneage_info of this MedicalRecords.  # noqa: E501
        :type has_boneage_info: bool
        :param boneage: The boneage of this MedicalRecords.  # noqa: E501
        :type boneage: object
        :param archive: The archive of this MedicalRecords.  # noqa: E501
        :type archive: object
        """
        self.swagger_types = {
            'id': int,
            'visit_time': str,
            'height': float,
            'weight': float,
            'height_report': str,
            'weight_report': str,
            'has_boneage_info': bool,
            'boneage': object,
            'archive': object
        }

        self.attribute_map = {
            'id': 'id',
            'visit_time': 'visitTime',
            'height': 'height',
            'weight': 'weight',
            'height_report': 'heightReport',
            'weight_report': 'weightReport',
            'has_boneage_info': 'has_boneage_info',
            'boneage': 'boneage',
            'archive': 'archive'
        }

        self._id = id
        self._visit_time = visit_time
        self._height = height
        self._weight = weight
        self._height_report = height_report
        self._weight_report = weight_report
        self._has_boneage_info = has_boneage_info
        self._boneage = boneage
        self._archive = archive

    @classmethod
    def from_dict(cls, dikt) -> 'MedicalRecords':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MedicalRecords of this MedicalRecords.  # noqa: E501
        :rtype: MedicalRecords
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this MedicalRecords.

        就诊id  # noqa: E501

        :return: The id of this MedicalRecords.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this MedicalRecords.

        就诊id  # noqa: E501

        :param id: The id of this MedicalRecords.
        :type id: int
        """

        self._id = id

    @property
    def visit_time(self) -> str:
        """Gets the visit_time of this MedicalRecords.

        就诊时间  # noqa: E501

        :return: The visit_time of this MedicalRecords.
        :rtype: str
        """
        return self._visit_time

    @visit_time.setter
    def visit_time(self, visit_time: str):
        """Sets the visit_time of this MedicalRecords.

        就诊时间  # noqa: E501

        :param visit_time: The visit_time of this MedicalRecords.
        :type visit_time: str
        """
        if visit_time is None:
            raise ValueError("Invalid value for `visit_time`, must not be `None`")  # noqa: E501

        self._visit_time = visit_time

    @property
    def height(self) -> float:
        """Gets the height of this MedicalRecords.

        就诊身高  # noqa: E501

        :return: The height of this MedicalRecords.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height: float):
        """Sets the height of this MedicalRecords.

        就诊身高  # noqa: E501

        :param height: The height of this MedicalRecords.
        :type height: float
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def weight(self) -> float:
        """Gets the weight of this MedicalRecords.

        就诊体重  # noqa: E501

        :return: The weight of this MedicalRecords.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight: float):
        """Sets the weight of this MedicalRecords.

        就诊体重  # noqa: E501

        :param weight: The weight of this MedicalRecords.
        :type weight: float
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def height_report(self) -> str:
        """Gets the height_report of this MedicalRecords.

        身高报告 json数据  # noqa: E501

        :return: The height_report of this MedicalRecords.
        :rtype: str
        """
        return self._height_report

    @height_report.setter
    def height_report(self, height_report: str):
        """Sets the height_report of this MedicalRecords.

        身高报告 json数据  # noqa: E501

        :param height_report: The height_report of this MedicalRecords.
        :type height_report: str
        """
        if height_report is None:
            raise ValueError("Invalid value for `height_report`, must not be `None`")  # noqa: E501

        self._height_report = height_report

    @property
    def weight_report(self) -> str:
        """Gets the weight_report of this MedicalRecords.

        BMI报告 json数据  # noqa: E501

        :return: The weight_report of this MedicalRecords.
        :rtype: str
        """
        return self._weight_report

    @weight_report.setter
    def weight_report(self, weight_report: str):
        """Sets the weight_report of this MedicalRecords.

        BMI报告 json数据  # noqa: E501

        :param weight_report: The weight_report of this MedicalRecords.
        :type weight_report: str
        """
        if weight_report is None:
            raise ValueError("Invalid value for `weight_report`, must not be `None`")  # noqa: E501

        self._weight_report = weight_report

    @property
    def has_boneage_info(self) -> bool:
        """Gets the has_boneage_info of this MedicalRecords.

        是否有骨龄信息 true-有 false-无  # noqa: E501

        :return: The has_boneage_info of this MedicalRecords.
        :rtype: bool
        """
        return self._has_boneage_info

    @has_boneage_info.setter
    def has_boneage_info(self, has_boneage_info: bool):
        """Sets the has_boneage_info of this MedicalRecords.

        是否有骨龄信息 true-有 false-无  # noqa: E501

        :param has_boneage_info: The has_boneage_info of this MedicalRecords.
        :type has_boneage_info: bool
        """

        self._has_boneage_info = has_boneage_info

    @property
    def boneage(self) -> object:
        """Gets the boneage of this MedicalRecords.

        骨龄信息id,管理就诊人的骨龄信息  # noqa: E501

        :return: The boneage of this MedicalRecords.
        :rtype: object
        """
        return self._boneage

    @boneage.setter
    def boneage(self, boneage: object):
        """Sets the boneage of this MedicalRecords.

        骨龄信息id,管理就诊人的骨龄信息  # noqa: E501

        :param boneage: The boneage of this MedicalRecords.
        :type boneage: object
        """
        if boneage is None:
            raise ValueError("Invalid value for `boneage`, must not be `None`")  # noqa: E501

        self._boneage = boneage

    @property
    def archive(self) -> object:
        """Gets the archive of this MedicalRecords.

        档案id,关联就诊人的档案信息  # noqa: E501

        :return: The archive of this MedicalRecords.
        :rtype: object
        """
        return self._archive

    @archive.setter
    def archive(self, archive: object):
        """Sets the archive of this MedicalRecords.

        档案id,关联就诊人的档案信息  # noqa: E501

        :param archive: The archive of this MedicalRecords.
        :type archive: object
        """

        self._archive = archive
