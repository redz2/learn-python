# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TestRecord(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, test_time: str=None, teststatus: bool=None, test_amount: int=None, test_means: str=None, test_ending: str=None, acc: float=None, test_person_id: object=None):  # noqa: E501
        """TestRecord - a model defined in Swagger

        :param id: The id of this TestRecord.  # noqa: E501
        :type id: int
        :param test_time: The test_time of this TestRecord.  # noqa: E501
        :type test_time: str
        :param teststatus: The teststatus of this TestRecord.  # noqa: E501
        :type teststatus: bool
        :param test_amount: The test_amount of this TestRecord.  # noqa: E501
        :type test_amount: int
        :param test_means: The test_means of this TestRecord.  # noqa: E501
        :type test_means: str
        :param test_ending: The test_ending of this TestRecord.  # noqa: E501
        :type test_ending: str
        :param acc: The acc of this TestRecord.  # noqa: E501
        :type acc: float
        :param test_person_id: The test_person_id of this TestRecord.  # noqa: E501
        :type test_person_id: object
        """
        self.swagger_types = {
            'id': int,
            'test_time': str,
            'teststatus': bool,
            'test_amount': int,
            'test_means': str,
            'test_ending': str,
            'acc': float,
            'test_person_id': object
        }

        self.attribute_map = {
            'id': 'id',
            'test_time': 'testTime',
            'teststatus': 'teststatus',
            'test_amount': 'testAmount',
            'test_means': 'testMeans',
            'test_ending': 'testEnding',
            'acc': 'acc',
            'test_person_id': 'testPersonID'
        }

        self._id = id
        self._test_time = test_time
        self._teststatus = teststatus
        self._test_amount = test_amount
        self._test_means = test_means
        self._test_ending = test_ending
        self._acc = acc
        self._test_person_id = test_person_id

    @classmethod
    def from_dict(cls, dikt) -> 'TestRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TestRecord of this TestRecord.  # noqa: E501
        :rtype: TestRecord
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this TestRecord.

        测试ID  # noqa: E501

        :return: The id of this TestRecord.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this TestRecord.

        测试ID  # noqa: E501

        :param id: The id of this TestRecord.
        :type id: int
        """

        self._id = id

    @property
    def test_time(self) -> str:
        """Gets the test_time of this TestRecord.

        测试时间  # noqa: E501

        :return: The test_time of this TestRecord.
        :rtype: str
        """
        return self._test_time

    @test_time.setter
    def test_time(self, test_time: str):
        """Sets the test_time of this TestRecord.

        测试时间  # noqa: E501

        :param test_time: The test_time of this TestRecord.
        :type test_time: str
        """

        self._test_time = test_time

    @property
    def teststatus(self) -> bool:
        """Gets the teststatus of this TestRecord.

        0-未完成 1-已完成  # noqa: E501

        :return: The teststatus of this TestRecord.
        :rtype: bool
        """
        return self._teststatus

    @teststatus.setter
    def teststatus(self, teststatus: bool):
        """Sets the teststatus of this TestRecord.

        0-未完成 1-已完成  # noqa: E501

        :param teststatus: The teststatus of this TestRecord.
        :type teststatus: bool
        """

        self._teststatus = teststatus

    @property
    def test_amount(self) -> int:
        """Gets the test_amount of this TestRecord.

        读片数量  # noqa: E501

        :return: The test_amount of this TestRecord.
        :rtype: int
        """
        return self._test_amount

    @test_amount.setter
    def test_amount(self, test_amount: int):
        """Sets the test_amount of this TestRecord.

        读片数量  # noqa: E501

        :param test_amount: The test_amount of this TestRecord.
        :type test_amount: int
        """

        self._test_amount = test_amount

    @property
    def test_means(self) -> str:
        """Gets the test_means of this TestRecord.

        读片方法  # noqa: E501

        :return: The test_means of this TestRecord.
        :rtype: str
        """
        return self._test_means

    @test_means.setter
    def test_means(self, test_means: str):
        """Sets the test_means of this TestRecord.

        读片方法  # noqa: E501

        :param test_means: The test_means of this TestRecord.
        :type test_means: str
        """

        self._test_means = test_means

    @property
    def test_ending(self) -> str:
        """Gets the test_ending of this TestRecord.

        单个读片结果  # noqa: E501

        :return: The test_ending of this TestRecord.
        :rtype: str
        """
        return self._test_ending

    @test_ending.setter
    def test_ending(self, test_ending: str):
        """Sets the test_ending of this TestRecord.

        单个读片结果  # noqa: E501

        :param test_ending: The test_ending of this TestRecord.
        :type test_ending: str
        """

        self._test_ending = test_ending

    @property
    def acc(self) -> float:
        """Gets the acc of this TestRecord.

        正确率  # noqa: E501

        :return: The acc of this TestRecord.
        :rtype: float
        """
        return self._acc

    @acc.setter
    def acc(self, acc: float):
        """Sets the acc of this TestRecord.

        正确率  # noqa: E501

        :param acc: The acc of this TestRecord.
        :type acc: float
        """

        self._acc = acc

    @property
    def test_person_id(self) -> object:
        """Gets the test_person_id of this TestRecord.

        测试人id,关联用户表  # noqa: E501

        :return: The test_person_id of this TestRecord.
        :rtype: object
        """
        return self._test_person_id

    @test_person_id.setter
    def test_person_id(self, test_person_id: object):
        """Sets the test_person_id of this TestRecord.

        测试人id,关联用户表  # noqa: E501

        :param test_person_id: The test_person_id of this TestRecord.
        :type test_person_id: object
        """

        self._test_person_id = test_person_id
