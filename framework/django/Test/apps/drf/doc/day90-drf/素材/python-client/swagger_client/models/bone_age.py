# coding: utf-8

"""
    项目名

    项目描述  # noqa: E501

    OpenAPI spec version: 1.1.1
    Contact: 649641514@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BoneAge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'means': 'str',
        'source': 'str',
        'source_department': 'str',
        'source_person': 'str',
        'x_ray': 'str',
        'boneage_data': 'str',
        'boneage_report': 'str'
    }

    attribute_map = {
        'id': 'id',
        'means': 'means',
        'source': 'source',
        'source_department': 'sourceDepartment',
        'source_person': 'sourcePerson',
        'x_ray': 'X_ray',
        'boneage_data': 'boneageData',
        'boneage_report': 'boneageReport'
    }

    def __init__(self, id=None, means=None, source=None, source_department=None, source_person=None, x_ray=None, boneage_data=None, boneage_report=None, _configuration=None):  # noqa: E501
        """BoneAge - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._means = None
        self._source = None
        self._source_department = None
        self._source_person = None
        self._x_ray = None
        self._boneage_data = None
        self._boneage_report = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.means = means
        self.source = source
        if source_department is not None:
            self.source_department = source_department
        if source_person is not None:
            self.source_person = source_person
        self.x_ray = x_ray
        self.boneage_data = boneage_data
        self.boneage_report = boneage_report

    @property
    def id(self):
        """Gets the id of this BoneAge.  # noqa: E501

        骨龄信息ID  # noqa: E501

        :return: The id of this BoneAge.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BoneAge.

        骨龄信息ID  # noqa: E501

        :param id: The id of this BoneAge.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def means(self):
        """Gets the means of this BoneAge.  # noqa: E501

        检测方法  # noqa: E501

        :return: The means of this BoneAge.  # noqa: E501
        :rtype: str
        """
        return self._means

    @means.setter
    def means(self, means):
        """Sets the means of this BoneAge.

        检测方法  # noqa: E501

        :param means: The means of this BoneAge.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and means is None:
            raise ValueError("Invalid value for `means`, must not be `None`")  # noqa: E501

        self._means = means

    @property
    def source(self):
        """Gets the source of this BoneAge.  # noqa: E501

        X光片来源  # noqa: E501

        :return: The source of this BoneAge.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this BoneAge.

        X光片来源  # noqa: E501

        :param source: The source of this BoneAge.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def source_department(self):
        """Gets the source_department of this BoneAge.  # noqa: E501

        来源科室  # noqa: E501

        :return: The source_department of this BoneAge.  # noqa: E501
        :rtype: str
        """
        return self._source_department

    @source_department.setter
    def source_department(self, source_department):
        """Sets the source_department of this BoneAge.

        来源科室  # noqa: E501

        :param source_department: The source_department of this BoneAge.  # noqa: E501
        :type: str
        """

        self._source_department = source_department

    @property
    def source_person(self):
        """Gets the source_person of this BoneAge.  # noqa: E501

        来源人  # noqa: E501

        :return: The source_person of this BoneAge.  # noqa: E501
        :rtype: str
        """
        return self._source_person

    @source_person.setter
    def source_person(self, source_person):
        """Sets the source_person of this BoneAge.

        来源人  # noqa: E501

        :param source_person: The source_person of this BoneAge.  # noqa: E501
        :type: str
        """

        self._source_person = source_person

    @property
    def x_ray(self):
        """Gets the x_ray of this BoneAge.  # noqa: E501

        X光片  # noqa: E501

        :return: The x_ray of this BoneAge.  # noqa: E501
        :rtype: str
        """
        return self._x_ray

    @x_ray.setter
    def x_ray(self, x_ray):
        """Sets the x_ray of this BoneAge.

        X光片  # noqa: E501

        :param x_ray: The x_ray of this BoneAge.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and x_ray is None:
            raise ValueError("Invalid value for `x_ray`, must not be `None`")  # noqa: E501

        self._x_ray = x_ray

    @property
    def boneage_data(self):
        """Gets the boneage_data of this BoneAge.  # noqa: E501

        骨龄数据  # noqa: E501

        :return: The boneage_data of this BoneAge.  # noqa: E501
        :rtype: str
        """
        return self._boneage_data

    @boneage_data.setter
    def boneage_data(self, boneage_data):
        """Sets the boneage_data of this BoneAge.

        骨龄数据  # noqa: E501

        :param boneage_data: The boneage_data of this BoneAge.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and boneage_data is None:
            raise ValueError("Invalid value for `boneage_data`, must not be `None`")  # noqa: E501

        self._boneage_data = boneage_data

    @property
    def boneage_report(self):
        """Gets the boneage_report of this BoneAge.  # noqa: E501

        骨龄报告  # noqa: E501

        :return: The boneage_report of this BoneAge.  # noqa: E501
        :rtype: str
        """
        return self._boneage_report

    @boneage_report.setter
    def boneage_report(self, boneage_report):
        """Sets the boneage_report of this BoneAge.

        骨龄报告  # noqa: E501

        :param boneage_report: The boneage_report of this BoneAge.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and boneage_report is None:
            raise ValueError("Invalid value for `boneage_report`, must not be `None`")  # noqa: E501

        self._boneage_report = boneage_report

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BoneAge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoneAge):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BoneAge):
            return True

        return self.to_dict() != other.to_dict()
